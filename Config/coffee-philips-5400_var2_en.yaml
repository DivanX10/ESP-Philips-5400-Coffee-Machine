#There are service sensors Message B0/B5/BA/90/91/93
#Added commands for cooking recipes, coffee can be prepared remotely many times
#ERROR is enabled in debugging instead of DEBUG
#Servo control (water drainage)
#Added sensors: container of coffee grounds, water, tray, presence of grain, coffee preparation statuses, coffee machine status: off or on


substitutions:
  board_name: Coffee Philips 5400
  node_name: coffee-philips-5400

esphome:
  name: ${node_name}
  friendly_name: coffee-philips-5400
  comment: ESP32 Coffee Philips 5400

esp32:
  board: esp32dev
  framework:
    type: arduino


#Wi-Fi credentials for connecting the board to the home network
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: on
  reboot_timeout: 10min

#If there is no connection with WiFi, then the access point will rise
  ap:
    ssid: ESP SmartCoffeePhilips
    password: !secret ap_esp_password

#The captive portal ESP Home component is a backup mechanism in case of a connection failure to the configured Wi-Fi
captive_portal:

#Web server
web_server:
  port: 80

#Logging
logger:
  level: ERROR #DEBUG
  baud_rate: 0

#Enable OTA
ota:
  password: "esphome"

#Enable Home Assistant API
api:
  encryption:
    key: !secret api_key
  services:
   - service: control_servo
     variables:
       level: float
     then:
       - servo.write:
           id: servo_control
           level: !lambda 'return level / 100.0;'
       - sensor.template.publish:
           id: servo_sensor
           state: !lambda 'return (float)level;'


#####################################################################################
################################## External component ################################
external_components:
  - source:
      type: git
      url: https://github.com/DivanX10/ESP-Philips-5400-Coffee-Machine

#####################################################################################
################################ Connected component #############################

philips_series_5400:
  display_uart: uart_display
  mainboard_uart: uart_mainboard
  id: philip


#####################################################################################
######################################### UART ######################################
uart:
 - id: uart_display
   rx_pin: GPIO16
   tx_pin: GPIO17
   baud_rate: 115200
   stop_bits: 1
   data_bits: 8
   parity: NONE
   rx_buffer_size: 256
   debug:
     direction: RX
     dummy_receiver: false
     sequence: 
      - lambda: |-
          UARTDebug::log_hex(direction, bytes, ':');
          //Coffee drinks
          //Message 93. The protocol has not yet been defined. It is displayed in this form [0xAA, 0xAA, 0xAA, 0x93, 0x0F, 0x01, 0x01, 0xBC, 0xD7, 0xF1, 0xEB, 0x55]
          if (bytes[0] == 0xAA && bytes[2] == 0xAA && bytes[3] == 0x93) {
              std::string message93 = "[";
              for (int i = 0; i <= 11; i++) {
                  char hex_str[6];
                  snprintf(hex_str, sizeof(hex_str), "0x%02X", bytes[i]);
                  message93 += hex_str;
                  if (i != 11) {
                      message93 += ", ";
                  }
              }
              message93 += "]";
              id(id93message).publish_state(message93);
          }

          //Message 91. Protocol counter. It is displayed in this form [0xAA, 0xAA, 0xAA, 0x91, 0x12, 0x01, 0x08, 0xB0, 0x97, 0xDA, 0x2C, 0x55]
          if (bytes[0] == 0xAA && bytes[2] == 0xAA && bytes[3] == 0x91) {
              std::string message91 = "[";
              for (int i = 0; i <= 11; i++) {
                  char hex_str[6];
                  snprintf(hex_str, sizeof(hex_str), "0x%02X", bytes[i]);
                  message91 += hex_str;
                  if (i != 11) {
                      message91 += ", ";
                  }
              }
              message91 += "]";
              id(id91message).publish_state(message91);  
          } 


 - id: uart_mainboard
   rx_pin: GPIO3
   tx_pin: GPIO1
   baud_rate: 115200
   stop_bits: 1
   data_bits: 8
   parity: NONE
   rx_buffer_size: 256
   debug:
     direction: RX
     dummy_receiver: false
     sequence: 
      - lambda: |-
          UARTDebug::log_hex(direction, bytes, ':');

          //AA:AA:AA:B0
          if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x06 && bytes[9]==0x00) { 
            id(idWater).publish_state("There is water");
            id(idPallet).publish_state("Inserted");
            id(idGrainTray).publish_state("There are grains");
            id(idStatus).publish_state("Choose a drink");
            id(idCoffeeGroundsContainer).publish_state("Пустой");
            }

          //AA:AA:AA:B0 "Availability of coffee beans"
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x08 && bytes[7]==0x05) { id(idGrainTray).publish_state("The grains have run out"); }

          //AA:AA:AA:B0 "Took out the container with water"
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x0E && bytes[9]==0x40) { id(idWater).publish_state("There is no water"); }

          //AA:AA:AA:B0 "The pallet was removed"
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x0E && bytes[9]==0x80) { id(idPallet).publish_state("Retrieved"); }

          //AA:AA:AA:B0 "The container with coffee grounds is filled"
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x0E && bytes[9]==0x00) { id(idCoffeeGroundsContainer).publish_state("Oporozhe. container for coffee grounds"); }

          //AA:AA:AA:B0 "The pallet and the container with water were taken out"
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x0E && bytes[9]==0xC0) { 
            id(idWater).publish_state("There is no water"); 
            id(idPallet).publish_state("Retrieved");
            }

          //AA:AA:AA:B0 "Statuses"
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x0C && bytes[7]==0x01) { id(idStatus).publish_state("Enjoy"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x0C && bytes[7]==0x02) { id(idStatus).publish_state("Something (07 0C 02)"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x01 && bytes[7]==0x00) { id(idStatus).publish_state("Something (07 01 00)"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x05 && bytes[7]==0x00) { id(idStatus).publish_state("Off"); } 
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x07 && bytes[7]==0x0E) { id(idStatus).publish_state("Water heating"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x07 && bytes[7]==0x0D) { id(idStatus).publish_state("Grinding the grains"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x07 && bytes[7]==0x10) { id(idStatus).publish_state("Pour the milk"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x07 && bytes[7]==0x11) { id(idStatus).publish_state("Pour the coffee"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x07 && bytes[7]==0x12) { id(idStatus).publish_state("Preliminary dosing"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x07 && bytes[7]==0x13) { id(idStatus).publish_state("Creating steam for milk"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x07 && bytes[7]==0x14) { id(idStatus).publish_state("The brewing unit to the brewing position"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x07 && bytes[7]==0x15) { id(idStatus).publish_state("Enjoy"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x08 && bytes[7]==0x0E) { id(idStatus).publish_state("Heating"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x08 && bytes[7]==0x02) { id(idStatus).publish_state("Flushing"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x08 && bytes[7]==0x14) { id(idStatus).publish_state("Something (07 08 14)"); }

          //AA:AA:AA:B5 "Error Code"
          if (bytes[0]==0xAA && bytes[3]==0xB5 && bytes[5]==0x06 && bytes[10]==0x00 && bytes[11]==0x00) { id(idErrorCode).publish_state("00"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB5 && bytes[5]==0x06 && bytes[10]==0x00 && bytes[11]==0x0B) { id(idErrorCode).publish_state("0B"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB5 && bytes[5]==0x06 && bytes[10]==0x00 && bytes[11]==0xE6) { id(idErrorCode).publish_state("E6"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB5 && bytes[5]==0x06 && bytes[10]==0x00 && bytes[11]==0x80) { id(idErrorCode).publish_state("80"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB5 && bytes[5]==0x06 && bytes[10]==0x00 && bytes[11]==0xCB) { id(idErrorCode).publish_state("CB"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB5 && bytes[5]==0x06 &&& bytes[10]==0x00 & bytes[11]==0xFF) { id(idErrorCode).publish_state("FF"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB5 && bytes[5]==0x06 && bytes[10]==0x00 && bytes[11]==0xA0) { id(idErrorCode).publish_state("A0"); }

          if (bytes[0]==0xAA) { id(idPowerStatus).publish_state(true); }
          //else if (bytes[2]==0xAA && bytes[3]==0xFE && bytes[8]==0x1B && bytes[9]==0x40) { id(idPowerStatus).publish_state(false); }


          //Message B0. Protocol of system sensors: container of coffee grounds, water, tray, presence of grain, coffee preparation statuses, custard block statuses 
          if (bytes[0]==0xAA && bytes[1]==0xAA && bytes[2]==0xAA){ // header
            if (bytes[3]==0xB0) { // status message B0
              std::string b0_message = "B0 ";
              for (int i = 4; i <= 12; i++) {
                char hex_str[3];
                snprintf(hex_str, sizeof(hex_str), "%02X", bytes[i]);
                b0_message += hex_str;
                b0_message += " ";
              }
              id(b0message).publish_state(b0_message);
            }

            //Message B5. Protocol coffee drink counter
            if (bytes[3]==0xB5) { // status message B5
              std::string b5_message = "B5 ";
              for (int i = 4; i <= 11; i++) {
                char hex_str[3];
                snprintf(hex_str, sizeof(hex_str), "%02X", bytes[i]);
                b5_message += hex_str;
                b5_message += " ";
              }
              id(b5message).publish_state(b5_message);
            }

            //Message BA. The protocol is not defined
            if (bytes[3]==0xBA) { // status message BA
              std::string ba_message = "BA ";
              for (int i = 4; i <= 30; i++) {
                char hex_str[3];
                snprintf(hex_str, sizeof(hex_str), "%02X", bytes[i]);
                ba_message += hex_str;
                ba_message += " ";
              }
              id(bamessage).publish_state(ba_message);
            }
          }


#####################################################################################
########################### Global variables ###################################
globals:
#We keep the position of the servo
  - id: saved_position
    type: int
    initial_value: '0'
    restore_value: true

#We save the state of the switch for automatic operation of the water outlet
  - id: idSavedAutoWaterDrain
    type: bool
    restore_value: yes
    initial_value: 'false'

#Сохраняем состояние выключтеля для отвода воды
  - id: idSavedStateValve
    type: bool
    restore_value: yes
    initial_value: 'false'

  - id: pack_counter
    type: uint8_t
    initial_value: '6'

#####################################################################################
############################## Output Platform #####################################
output:
  - platform: ledc
    id: pwm_output
    pin: GPIO27
    frequency: 50 Hz

#####################################################################################
################################ Configuration #######################################
servo:
  - id: servo_control
    output: pwm_output
    auto_detach_time: 5s
    transition_length: 5s
    restore: true

#####################################################################################
################################### Text Sensor ################################
text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP

  - platform: template
    name: "Water"
    icon: mdi:cup-water
    id: idWater
    update_interval: 60s

  - platform: template
    name: "Coffee Grounds Container"
    icon: mdi:train-car-centerbeam-full
    id: idCoffeeGroundsContainer
    update_interval: 60s

  - platform: template
    name: "Coffee Pallet"
    icon: mdi:spirit-level
    id: idPallet
    update_interval: 60s

  - platform: template
    name: "Error Code"
    icon: mdi:alert-circle-outline
    id: idErrorCode
    update_interval: 60s

  - platform: template
    name: "Grain Tray"
    icon: mdi:grain
    id: idGrainTray
    update_interval: 60s

  - platform: template
    name: "Status"
    icon: mdi:coffee-to-go
    id: idStatus
    update_interval: 60s
    on_value:
      then:
        - if:
            condition:
              - lambda: 'return id(idStatus).state == "Choose a drink";'
            then:  
              - script.execute: script_auto_water_drain
        - if:
            condition:
              - lambda: 'return id(idStatus).state == "Off";'
            then:  
              - script.execute: script_auto_water_drain



#####################################################################################
################################## Binary sensor ##################################
binary_sensor:
  - platform: template
    name: "Power Status"
    id: idPowerStatus
    lambda: |-
      if (id(idPowerStatus).state) {
        return true;
      } else {
        return false;
      }


#####################################################################################
################################## Sensor ###########################################
sensor:
#Wi Fi signal strength sensor
  - platform: wifi_signal
    name: RSSI WiFi
    icon: mdi:wifi
    update_interval: 60s

#Servomotor position sensor
  - platform: template
    name: Servo Sensor Position
    id: servo_sensor
    icon: mdi:valve
    on_value:
      then:
        - script.execute: script_servo
        - script.execute: record_servo_position


#####################################################################################
################################## Switch ######################################
switch:
#Hidden switch for relay control, for turning on and off the coffee machine
  - platform: gpio
    pin: GPIO14
    name: "Relay Switch"
    id: idRelaySwitch
    internal: True #Hide - true \show - false
    restore_mode: ALWAYS_OFF

#Servo switch with start and end position
  - platform: template
    id: servo_control_switch
    name: Valve open/closed
    icon: mdi:coffee-maker-outline
    optimistic: True
    lambda: !lambda 'return id(idSavedStateValve);'
    turn_on_action:
      - sensor.template.publish:
          id: servo_sensor
          state: !lambda 'return id(valve_open).state;'
      - switch.template.publish:
         id: servo_control_switch
         state: true
      - servo.write:
         id: servo_control
         level: !lambda 'return (id(valve_open).state/100);'
      - globals.set:
          id: idSavedStateValve
          value: 'true'
    turn_off_action:
      - sensor.template.publish:
          id: servo_sensor
          state: !lambda 'return id(valve_closed).state;'
      - switch.template.publish:
         id: servo_control_switch
         state: false
      - servo.write:
         id: servo_control
         level: !lambda 'return (id(valve_closed).state/100);'
      - globals.set:
          id: idSavedStateValve
          value: 'false'

#Automatic operation of water drainage
  - platform: template
    name: "Automatic Water Drain"
    id: idAutoWaterDrain
    internal: False #Hide - true \show - false
    optimistic: True
    lambda: !lambda 'return id(idSavedAutoWaterDrain);'
    turn_on_action:
      - script.execute: script_auto_water_drain_on
      - globals.set:
          id: idSavedAutoWaterDrain
          value: 'true'
    turn_off_action:
      - switch.turn_on: servo_control_switch
      - globals.set:
          id: idSavedAutoWaterDrain
          value: 'false'

#####################################################################################
####################################### Script ######################################
script:
  - id: script_servo
    then:
      - if:
          condition:
            - lambda: 'return id(servo_sensor).state == id(valve_open).state;'
          then:
            - sensor.template.publish:
               id: servo_sensor
               state: !lambda 'return (id(valve_open).state/100);'
            - switch.turn_on: servo_control_switch
      - if:
          condition:
            and:
              - lambda: 'return id(servo_sensor).state == id(valve_closed).state;'
          then:
            - sensor.template.publish:
               id: servo_sensor
               state: !lambda 'return id(valve_closed).state;'
            - switch.turn_off: servo_control_switch

#Writes the position of the servo to the global variable
  - id: record_servo_position
    then:
      - globals.set:
          id: saved_position
          value: !lambda 'return id(servo_sensor).state;'

#If you turn on the "Automatic Water Drain" switch, the water drain, depending on the status of the coffee machine, will take the desired position. 
#If the coffee machine is turned off, then when the "Automatic Water Drain" is turned on, the water drain will close the spout, and when turned off, it will move aside and open the #spout.
#The || sign means a condition or
  - id: script_auto_water_drain_on
    then:
      - if:
          condition:
            - lambda: 'return id(idPowerStatus).state == true && id(idStatus).state == "Выберите напиток";'
          then:  
            - switch.turn_on: servo_control_switch #Не перекрываем носик кофемашины отводом воды
      - if:
          condition:
            - lambda: 'return id(idPowerStatus).state == false || id(idStatus).state == "Выключено";'
          then:  
            - switch.turn_off: servo_control_switch #We block the spout of the coffee machine with water drainage

#If the "Automatic Water Drain" switch is turned on, the water drain will be removed after the flushing stage has passed and you will be asked to choose a drink, if the coffee #machine is turned off, then the water drain will be in the position at the spout
  - id: script_auto_water_drain
    then:
      - if:
          condition:
              #If "Automatic Water Drain" is enabled and the water drain closes the spout and the status "Choose a drink"
            - lambda: 'return id(idAutoWaterDrain).state == true && id(servo_control_switch).state == false && id(idStatus).state == "Choose a drink";'
          then:  
            - switch.turn_on: servo_control_switch
      - if:
          condition:
              #If "Automatic Water Drain" is enabled and the water drain does not close the spout
            - lambda: 'return id(idAutoWaterDrain).state == true && id(servo_control_switch).state == true;'
          then:
            - if:
                condition:
                    #If the coffee machine is turned off, where the status id Power Status = false or idStatus = "Off"
                  - lambda: 'return id(idPowerStatus).state == false || id(idStatus).state == "Off";'
                then:
                  - delay: 5s 
                  - if:
                      condition:
                          #Re-checking if the coffee machine is turned off, where the status idPowerStatus = false or idStatus = "Off"
                        - lambda: 'return id(idPowerStatus).state == false || id(idStatus).state == "Off";'
                      then:
                        - switch.turn_off: servo_control_switch

#####################################################################################
####################################### Button ######################################
button:
#Reboot
  - platform: restart
    name: Restart
    icon: mdi:restart

#Turn on the coffee machine
  - platform: template
    name: "Power ON"
    icon: mdi:power
    on_press:
     - switch.turn_on: idRelaySwitch
     - delay: 1s
     - switch.turn_off: idRelaySwitch

#Turn off the coffee machine
  - platform: template
    name: "Power OFF"
    icon: mdi:power
    on_press:
     - switch.turn_on: idRelaySwitch
     - delay: 2s
     - switch.turn_off: idRelaySwitch

#Turn off the coffee machine with the command AA:AA:AA:FE:00:00:C8:87:1B:40:55
  - platform: template
    name: "PowerOFF AA-FE"
    icon: mdi:coffee
    on_press:
      - uart.write:
          id: uart_mainboard
          data: [0xAA, 0xAA, 0xAA, 0xFE, 0x00, 0x00, 0xC8, 0x87, 0x1B, 0x40, 0x55]

#####################################################################################
############################ Coffee Recipes #############################
#Drink: Coffee 1. Grain: Max. Coffee: 150 ml
  - platform: template
    name: "Coffee Max 150ml"
    icon: mdi:coffee
    on_press:
      - lambda: |-
          {
            uint8_t data[]={0x93, id(pack_counter)++, 0x01, 0x01};
            id(philip)->send_packet(data, sizeof(data));
          }
          {
            uint8_t data[]={0x90, id(pack_counter)++, 0x0A, 0x00, 0x01, 0x00, 0x02, 0x02, 0x00, 0x78, 0x00, 0x00, 0x00};
            id(philip)->send_packet(data, sizeof(data));
          }
          {
            uint8_t data[]={0x91, id(pack_counter)++, 0x01, 0x03};
            id(philip)->send_packet(data, sizeof(data));
          }

#Drink: Coffee with milk. Grain: Maximum. Coffee: 120 ml. Milk: 120 ml.
  - platform: template
    name: "Coffee with milk 120/120ml"
    icon: mdi:coffee
    on_press:
      - lambda: |-
          {
            uint8_t data[]={0x93, id(pack_counter)++, 0x01, 0x01};
            id(philip)->send_packet(data, sizeof(data));
          }
          {
            uint8_t data[]={0x90, id(pack_counter)++, 0x0A, 0x02, 0x02, 0x00, 0x02, 0x01, 0x02, 0x78, 0x00, 0x78, 0x00};
            id(philip)->send_packet(data, sizeof(data));
          }
          {
            uint8_t data[]={0x91, id(pack_counter)++, 0x01, 0x03};
            id(philip)->send_packet(data, sizeof(data));
          }

#Drink: Cappuccino. Grain: Maximum. Coffee: 60 ml. Milk: 150 ml.
  - platform: template
    name: "Cappuccino Max 60/150ml"
    icon: mdi:coffee
    on_press:
      - lambda: |-
          {
            uint8_t data[]={0x93, id(pack_counter)++, 0x01, 0x01};
            id(philip)->send_packet(data, sizeof(data));
          }
          {
            uint8_t data[]={0x90, id(pack_counter)++, 0x0A, 0x03, 0x02, 0x00, 0x02, 0x03, 0x02, 0x3C, 0x00, 0x96, 0x00};
            id(philip)->send_packet(data, sizeof(data));
          }
          {
            uint8_t data[]={0x91, id(pack_counter)++, 0x01, 0x03};
            id(philip)->send_packet(data, sizeof(data));
          }


#####################################################################################
####################################### Number #######################################
#Slider for servo control
number:
  - platform: template
    name: Valve Position
    min_value: -100
    max_value: 100
    update_interval: 1s 
    mode: slider #slider/box
    lambda: 'return id(servo_sensor).state;'
    step: 1
    set_action:
      then:
        - servo.write:
           id: servo_control
           level: !lambda 'return x / 100.0;'
        - sensor.template.publish:
           id: servo_sensor
           state: !lambda 'return x;'

#Specify the initial position of the servo
  - platform: template
    name: Valve open
    id: valve_open
    min_value: -100
    max_value: 100
    mode: box #slider/box
    step: 1
    optimistic: true
    restore_value: true

#Specify the final position of the servo
  - platform: template
    name: Valve closed
    id: valve_closed
    min_value: -100
    max_value: 100
    mode: box #slider/box
    step: 1
    optimistic: true
    restore_value: true


#####################################################################################
####################################### Time #######################################
time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow
    on_time:
      - seconds: 59
        then:
          - lambda: |-
              id(idPowerStatus).publish_state(false);
          - script.execute: script_auto_water_drain

