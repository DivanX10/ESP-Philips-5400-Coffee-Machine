#This option is without a servo drive and automatic water removal from the spout of the coffee machine
#Added one example of a coffee drink to understand where and how to add your favorite coffee drinks

substitutions:
  board_name: Coffee Philips 5400
  node_name: coffee-philips-5400

esphome:
  name: ${node_name}
  friendly_name: coffee-philips-5400
  comment: ESP32 Coffee Philips 5400

esp32:
  board: esp32dev
  framework:
    type: arduino
    version: recommended

#Wi-Fi credentials for connecting the board to the home network
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: off
  reboot_timeout: 15min

#If there is no connection with WiFi, then the access point will rise
  ap:
    ssid: ESP SmartCoffeePhilips
    password: !secret ap_esp_password

#The captive portal component in ESPHome is a backup mechanism in case of a connection failure to the configured Wi-Fi
captive_portal:

#The web server is turned off on purpose, since the coffee machine turns off spontaneously at any moment
#web_server:
#  port: 80

#Logging
logger:
  level: ERROR #NONE
  baud_rate: 0

#Enable OTA
ota:
  password: "esphome"

#Enable Home Assistant API
#Encryption turned off to reduce the load on the ESP
api:


#####################################################################################
################################## External component ###############################
external_components:
  - source:
      type: git
      url: https://github.com/DivanX10/ESP-Philips-5400-Coffee-Machine

#####################################################################################
######################################### UART ######################################
uart:
 - id: uart_display
   rx_pin: GPIO16
   tx_pin: GPIO17
   baud_rate: 115200
   stop_bits: 1
   data_bits: 8
   parity: NONE
   rx_buffer_size: 256

 - id: uart_mainboard
   rx_pin: GPIO3 #gpio 14 is recommended
   tx_pin: GPIO1 #gpio 5 is recommended
   baud_rate: 115200
   stop_bits: 1
   data_bits: 8
   parity: NONE
   rx_buffer_size: 256


#####################################################################################
################################## Connected component ##############################
philips_series_5400:
  display_uart: uart_display
  mainboard_uart: uart_mainboard
  restore_value: true
  id: philip 
  #Sensors for publishing messages in text form. In order for the sensor to be displayed, comment
  #B0_msg:
  #  name: Messge B0 #System sensors
  #B5_msg:
  #  name: Messge B5 #Coffee and milk volume counter for making coffee drinks
  #BA_msg:
  #  name: Messge BA #Couldn't decipher
  90_msg:
    name: Messge2 90 #Coffee Drink Recipes
  #91_msg:
  #  name: Messge3 91 #Coffee Beverage Preparation counter
  #93_msg:
  #  name: Messge1 93 #Coffee Beverage Preparation counter

  #Coffee Settings
  Coffee_volume: #Coffee volume NUMBER
    name: Сoffee
    mode: box #slider/box
  Milk_volume: #Milk volume NUMBER
    name: Milk
    mode: box #slider/box
  Strength_select: #Grinding SELECT
    name: Grind
  Cups_select: #Number of cups SELECT
    name: Cups
  Product_select: #Choosing a coffee drink SELECT
    name: Drink
  Display_product: #Product in operation, text sensor
    name: Product
  Start_key: #Start cooking button
    name: Build Coffee
  Test_key: #Display the selected recipe in the sensor 90
    name: Prepare


  #The sensor into which the component publishes the status digitally
  state_sensor:
    name: Work State
    id: idControlSensor
    internal: True #Hide - True \Show - False
    on_value:
      then:
      - lambda: |-
          //AA:AA:AA:B0 "System sensors"
          if(x==21){
           id(idStatus).publish_state("Choose a drink");
           id(idWater).publish_state("There is water");
           id(idPallet).publish_state("Inserted");
           id(idGrainTray).publish_state("There are grains");
           id(idCoffeeGroundsContainer).publish_state("Empty");
          }

          //AA:AA:AA:B0 "Statuses"
          else if(x==1){id(idStatus).publish_state("Something (07 01 00)");}
          else if(x==2){id(idStatus).publish_state("Off");}
          else if(x==3){id(idStatus).publish_state("Pour the milk");}
          else if(x==4){id(idStatus).publish_state("Pour the coffee");}
          else if(x==5){id(idStatus).publish_state("Preliminary dosing");}
          else if(x==6){id(idStatus).publish_state("Creating steam for milk");}
          else if(x==7){id(idStatus).publish_state("The brewing unit to the brewing position");}
          else if(x==8){id(idStatus).publish_state("Enjoy");}
          else if(x==9){id(idStatus).publish_state("Water heating");}
          else if(x==10){id(idStatus).publish_state("Grinding the grains");}
          else if(x==11){id(idStatus).publish_state("Flushing");}
          else if(x==12){id(idGrainTray).publish_state("The grains ran out");}
          else if(x==13){id(idStatus).publish_state("Something (07 08 14)");}
          else if(x==14){id(idStatus).publish_state("Heating");}
          else if(x==15){id(idStatus).publish_state("Enjoy");}
          else if(x==16){id(idStatus).publish_state("Something (07 0C 02)");}
          else if(x==17){id(idWater).publish_state("There is water");}
          else if(x==18){id(idPallet).publish_state("Inserted");}
          else if(x==20){id(idCoffeeGroundsContainer).publish_state("Oporozhe. container for coffee grounds");}
          else if(x==22){id(idWater).publish_state("There is no water");}
          else if(x==23){id(idPallet).publish_state("Retrieved");}
          else if(x==24){id(idPallet).publish_state("Descaling. Step 1");}
          else if(x==25){id(idPallet).publish_state("Descaling. Step 2");}
          

          //AA:AA:AA:B5 "Error Code"
          else if(x==30){id(idErrorCode).publish_state("00");}
          else if(x==31){id(idErrorCode).publish_state("0B");}
          else if(x==32){id(idErrorCode).publish_state("E6");}
          else if(x==33){id(idErrorCode).publish_state("80");}
          else if(x==34){id(idErrorCode).publish_state("CB");}
          else if(x==35){id(idErrorCode).publish_state("FF");}
          else if(x==36){id(idErrorCode).publish_state("A0");}


#####################################################################################
################################## Binary sensor ##################################
#Coffee machine status: on or off
binary_sensor:
  - platform: template
    name: "Power Status"
    id: idPowerStatus
    icon: mdi:power
    lambda: |-
      if (id(idControlSensor).state != 2) {
        return true;
      } else {
        return false;
      }

#####################################################################################
################################## Sensor ###########################################
sensor:
#WiFi Signal Strength Sensor
  - platform: wifi_signal
    name: RSSI WiFi
    icon: mdi:wifi
    update_interval: 60s

#ESP Uptime sensor
  - platform: uptime
    name: Uptime Sensor
    update_interval: 60s

#Sensor of the built-in temperature sensor in ESP
  - platform: internal_temperature
    name: "Internal Temperature"
    icon: mdi:thermometer

#Free memory
  - platform: template
    name: Free Mem Size
    icon: mdi:memory
    entity_category: diagnostic
    lambda: |-
      #ifdef MALLOC_CAP_DEFAULT
         size_t freeValue = heap_caps_get_free_size(MALLOC_CAP_DEFAULT);
      #else
         size_t freeValue = ESP.getFreeHeap();
      #endif
      return freeValue;


#####################################################################################
################################### Text Sensor ################################
text_sensor:
#Сенсор IP
  - platform: wifi_info
    ip_address:
      name: IP

#ESPHome Version
  - platform: version
    hide_timestamp: true
    name: "ESPHome Version"

#Water container
  - platform: template
    name: "Water"
    icon: mdi:cup-water
    id: idWater
    update_interval: never

#Container of coffee grounds
  - platform: template
    name: "Coffee Grounds Container"
    icon: mdi:train-car-centerbeam-full
    id: idCoffeeGroundsContainer
    update_interval: never

#Pallet
  - platform: template
    name: "Coffee Pallet"
    icon: mdi:spirit-level
    id: idPallet
    update_interval: never

#System errors
  - platform: template
    name: "Error Code"
    icon: mdi:alert-circle-outline
    id: idErrorCode
    update_interval: never

#Coffee beans
  - platform: template
    name: "Grain Tray"
    icon: mdi:grain
    id: idGrainTray
    update_interval: never

#Statuses
  - platform: template
    name: "Status"
    icon: mdi:coffee-to-go
    id: idStatus
    update_interval: never


#####################################################################################
################################## Switch ######################################
switch:
#Hidden switch for relay control, for turning on and off the coffee machine
  - platform: gpio
    pin: GPIO26
    name: "Relay Switch"
    id: idRelaySwitch
    internal: True #Hide - True \Show - False
    restore_mode: ALWAYS_OFF #Always off


#####################################################################################
####################################### Button ######################################
button:
#Reboot
  - platform: restart
    name: Restart
    icon: mdi:restart

#Turn on the coffee machine
  - platform: template
    name: "Power ON"
    icon: mdi:power
    on_press:
      - switch.turn_on: idRelaySwitch
      - delay: 1s
      - switch.turn_off: idRelaySwitch

#Turn off the coffee machine
  - platform: template
    name: "Power OFF"
    icon: mdi:power
    on_press:
      #Turn on the relay
      - switch.turn_on: idRelaySwitch
      #Delay of 2 seconds
      - delay: 2s
      #Turn off the relay
      - switch.turn_off: idRelaySwitch

#Additional switch-off button of the coffee machine, in case it does not turn off via the main switch-off button
  - platform: template
    name: "Power OFF AA:FE"
    icon: mdi:power
    on_press:
      #We send a command to turn off the coffee machine
      - uart.write:
          id: uart_mainboard
          data: [0xAA, 0xAA, 0xAA, 0xFE, 0x00, 0x00, 0xC8, 0x87, 0x1B, 0x40, 0x55]


#####################################################################################
############################ Coffee Recipes #############################
  - platform: template
    name: "Americano ground 90ml"
    icon: mdi:coffee
    on_press:
      - lambda: |-
          {
            uint8_t data[]={0x01, 0x03, 0x00, 0x02, 0x02, 0x00, 0x28, 0x00, 0x5A, 0x00};
            id(philip)->coffee_start(data);
            id(philip)->coffee_start();
          }


#####################################################################################
####################################### Time #######################################
time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow

