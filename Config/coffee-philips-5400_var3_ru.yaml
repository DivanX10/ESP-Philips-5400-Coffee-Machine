#Убраны служебные сенсоры Message B0/B5/BA/90/91/93
#Добавлены команды на приготовление рецептов, кофе можно готовить удаленно много раз
#В отладке включено ERROR вместо DEBUG
#Управление сервоприводом (отвод воды)
#Добавлены сенсоры: контейнер кофейно гущи, воды, поддона, наличие зерна, статусы приготовления кофе, статус кофемашины: выключена или включена

substitutions:
  board_name: Coffee Philips 5400
  node_name: coffee-philips-5400

esphome:
  name: ${node_name}
  friendly_name: coffee-philips-5400
  comment: ESP32 Coffee Philips 5400

esp32:
  board: esp32dev
  framework:
    type: arduino


#Учетные данные Wi-Fi для подключения платы к домашней сети
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: on
  reboot_timeout: 10min

#Если не будет связи с WiFi, то поднимется точка доступа
  ap:
    ssid: ESP SmartCoffeePhilips
    password: !secret ap_esp_password

#Компонент captive portal в ESPHome является резервным механизмом на случай сбоя подключения к настроенному Wi-Fi.
captive_portal:

#Веб сервер
web_server:
  port: 80

#Журналирование
logger:
  level: ERROR #DEBUG
  baud_rate: 0

#Enable OTA
ota:
  password: "esphome"

#Enable Home Assistant API
api:
  encryption:
    key: !secret api_key
  services:
   - service: control_servo
     variables:
       level: float
     then:
       - servo.write:
           id: servo_control
           level: !lambda 'return level / 100.0;'
       - sensor.template.publish:
           id: servo_sensor
           state: !lambda 'return (float)level;'


#####################################################################################
################################## Внешний компонент ################################
external_components:
  - source:
      type: git
      url: https://github.com/DivanX10/ESP-Philips-5400-Coffee-Machine

#####################################################################################
################################ Подключенный компонент #############################

philips_series_5400:
  display_uart: uart_display
  mainboard_uart: uart_mainboard
  id: philip

#####################################################################################
######################################### UART ######################################
uart:
#UART подключение к панели управления. Считываем данные которые приходят от материнской плате в панель управления
 - id: uart_display
   rx_pin: GPIO16 #Считываем данные с панели управления
   tx_pin: GPIO17 #Посылаем данные в панель управления
   baud_rate: 115200
   stop_bits: 1
   data_bits: 8
   parity: NONE
   rx_buffer_size: 256
   debug:
     direction: RX
     dummy_receiver: false


 - id: uart_mainboard
   rx_pin: GPIO3 #Считываем данные с материнской платы
   tx_pin: GPIO1 #Посылаем данные в материнскую плату
   baud_rate: 115200
   stop_bits: 1
   data_bits: 8
   parity: NONE
   rx_buffer_size: 256
   debug:
     direction: RX #BOTH
     dummy_receiver: false
     sequence: 
      - lambda: |-
          UARTDebug::log_hex(direction, bytes, ':');
          //AA:AA:AA:B0
          if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x06 && bytes[9]==0x00) { 
            id(idWater).publish_state("Вода есть");
            id(idPallet).publish_state("Вставлен");
            id(idGrainTray).publish_state("Зерна есть");
            id(idStatus).publish_state("Выберите напиток");
            id(idCoffeeGroundsContainer).publish_state("Пустой");
            }
          //AA:AA:AA:B0 "Наличие кофейных зерен"
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x08 && bytes[7]==0x05) { id(idGrainTray).publish_state("Зерна закончились"); }

          //AA:AA:AA:B0 "Вынули контейнер с водой"
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x0E && bytes[9]==0x40) { id(idWater).publish_state("Воды нет"); }

          //AA:AA:AA:B0 "Вынули поддон"  
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x0E && bytes[9]==0x80) { id(idPallet).publish_state("Извлечен"); }

          //AA:AA:AA:B0 "Контейнер с кофейной гущей заполнен"
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x0E && bytes[9]==0x00) { id(idCoffeeGroundsContainer).publish_state("Опорож. контейнер для коф. гущи"); }

          //AA:AA:AA:B0 "Вынули поддон и контейнер с водой"
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x0E && bytes[9]==0xC0) { 
            id(idWater).publish_state("Воды нет"); 
            id(idPallet).publish_state("Извлечен");
            }
          
          //AA:AA:AA:B0 "Статусы"
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x0C && bytes[7]==0x01) { id(idStatus).publish_state("Наслаждайтесь"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x0C && bytes[7]==0x02) { id(idStatus).publish_state("Что-то (07 0C 02)"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x01 && bytes[7]==0x00) { id(idStatus).publish_state("Что-то (07 01 00)"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x05 && bytes[7]==0x00) { id(idStatus).publish_state("Выключено"); } 
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x07 && bytes[7]==0x0E) { id(idStatus).publish_state("Нагрев воды"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x07 && bytes[7]==0x0D) { id(idStatus).publish_state("Перемалываем зерна"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x07 && bytes[7]==0x10) { id(idStatus).publish_state("Наливаем молоко"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x07 && bytes[7]==0x11) { id(idStatus).publish_state("Наливаем кофе"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x07 && bytes[7]==0x12) { id(idStatus).publish_state("Предварительное дозирование"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x07 && bytes[7]==0x13) { id(idStatus).publish_state("Создание пара для молока"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x07 && bytes[7]==0x14) { id(idStatus).publish_state("Заварочный узел в положение заваривания"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x07 && bytes[7]==0x15) { id(idStatus).publish_state("Наслаждайтесь"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x08 && bytes[7]==0x0E) { id(idStatus).publish_state("Нагревание"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x08 && bytes[7]==0x02) { id(idStatus).publish_state("Промывка"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB0 && bytes[5]==0x07 && bytes[6]==0x08 && bytes[7]==0x14) { id(idStatus).publish_state("Что-то (07 08 14)"); }

          //AA:AA:AA:B5 "Error Code"
          if (bytes[0]==0xAA && bytes[3]==0xB5 && bytes[5]==0x06 && bytes[10]==0x00 && bytes[11]==0x00) { id(idErrorCode).publish_state("00"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB5 && bytes[5]==0x06 && bytes[10]==0x00 && bytes[11]==0x0B) { id(idErrorCode).publish_state("0B"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB5 && bytes[5]==0x06 && bytes[10]==0x00 && bytes[11]==0xE6) { id(idErrorCode).publish_state("E6"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB5 && bytes[5]==0x06 && bytes[10]==0x00 && bytes[11]==0x80) { id(idErrorCode).publish_state("80"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB5 && bytes[5]==0x06 && bytes[10]==0x00 && bytes[11]==0xCB) { id(idErrorCode).publish_state("CB"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB5 && bytes[5]==0x06 &&& bytes[10]==0x00 & bytes[11]==0xFF) { id(idErrorCode).publish_state("FF"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB5 && bytes[5]==0x06 && bytes[10]==0x00 && bytes[11]==0xA0) { id(idErrorCode).publish_state("A0"); }

          //AA:AA:AA:B5 "Статус 2"
          else if (bytes[0]==0xAA && bytes[3]==0xB5 && bytes[5]==0x06 && bytes[10]==0x00) { id(idStatusUnknown2).publish_state("00"); }
          else if (bytes[0]==0xAA && bytes[3]==0xB5 && bytes[5]==0x06 && bytes[10]==0x01) { id(idStatusUnknown2).publish_state("01"); }

          if (bytes[0]==0xAA) { id(idPowerStatus).publish_state(true); }
          //else if (bytes[2]==0xAA && bytes[3]==0xFE && bytes[8]==0x1B && bytes[9]==0x40) { id(idPowerStatus).publish_state(false); }


#####################################################################################
########################### Глобальные переменные ###################################
globals:
#Сохраняем позицию сервопривода
  - id: saved_position
    type: int
    initial_value: '0'
    restore_value: true

#Сохраняем состояние выключтеля для автоматической работы отвода воды
  - id: idSavedAutoWaterDrain
    type: bool
    restore_value: yes
    initial_value: 'false'

##Сохраняем состояние выключтеля для отвода воды
  - id: idSavedStateValve
    type: bool
    restore_value: yes
    initial_value: 'false'

  - id: pack_counter
    type: uint8_t
    initial_value: '6'

#####################################################################################
############################## Платформа вывода #####################################
output:
  - platform: ledc
    id: pwm_output
    pin: GPIO27
    frequency: 50 Hz

#####################################################################################
################################ Конфигурация #######################################
#Переменные конфигурации: выход (обязательно, идентификатор): идентификатор выходного компонента, который будет использоваться для данного сервопривода
servo:
  - id: servo_control
    output: pwm_output
    auto_detach_time: 5s
    transition_length: 5s
    restore: true

#####################################################################################
################################### Текстовый сенсор ################################
text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP

  - platform: template
    name: "Water"
    icon: mdi:cup-water
    id: idWater
    update_interval: 60s

  - platform: template
    name: "Coffee Grounds Container"
    icon: mdi:train-car-centerbeam-full
    id: idCoffeeGroundsContainer
    update_interval: 60s

  - platform: template
    name: "Coffee Pallet"
    icon: mdi:spirit-level
    id: idPallet
    update_interval: 60s

  - platform: template
    name: "Error Code"
    icon: mdi:alert-circle-outline
    id: idErrorCode
    update_interval: 60s

  - platform: template
    name: "Grain Tray"
    icon: mdi:grain
    id: idGrainTray
    update_interval: 60s

  - platform: template
    name: "Status"
    icon: mdi:coffee-to-go
    id: idStatus
    update_interval: 60s
    on_value:
      then:
        - if:
            condition:
              - lambda: 'return id(idStatus).state == "Выберите напиток";'
            then:  
              - script.execute: script_auto_water_drain
        - if:
            condition:
              - lambda: 'return id(idStatus).state == "Выключено";'
            then:  
              - script.execute: script_auto_water_drain

  - platform: template
    id: idStatusUnknown2
    name: "Статус 2"
    update_interval: 60s


#####################################################################################
################################## Бинарный сенсор ##################################
binary_sensor:
  - platform: template
    name: "Power Status"
    id: idPowerStatus
    lambda: |-
      if (id(idPowerStatus).state) {
        return true;
      } else {
        return false;
      }


#####################################################################################
################################## Сенсор ###########################################
sensor:
#Сенсор уровня сигнала WiFi
  - platform: wifi_signal
    name: RSSI WiFi
    icon: mdi:wifi
    update_interval: 60s

#Сенсор позиции сервомотора
  - platform: template
    name: Servo Sensor Position
    id: servo_sensor
    icon: mdi:valve
    on_value:
      then:
        - script.execute: script_servo
        - script.execute: record_servo_position


#####################################################################################
################################## Выключатель ######################################
switch:
#Скрытый выключатель для управления реле, для включения и выключения кофемашины
  - platform: gpio
    pin: GPIO14
    name: "Relay Switch"
    id: idRelaySwitch
    internal: True #Скрыть - true \показать - false
    restore_mode: ALWAYS_OFF

#Выключатель сервопривода с начальной и конечной позицией
  - platform: template
    id: servo_control_switch
    name: Valve open/closed
    icon: mdi:coffee-maker-outline
    optimistic: True
    lambda: !lambda 'return id(idSavedStateValve);'
    turn_on_action:
      - sensor.template.publish:
          id: servo_sensor
          state: !lambda 'return id(valve_open).state;'
      - switch.template.publish:
         id: servo_control_switch
         state: true
      - servo.write:
         id: servo_control
         level: !lambda 'return (id(valve_open).state/100);'
      - globals.set:
          id: idSavedStateValve
          value: 'true'
    turn_off_action:
      - sensor.template.publish:
          id: servo_sensor
          state: !lambda 'return id(valve_closed).state;'
      - switch.template.publish:
         id: servo_control_switch
         state: false
      - servo.write:
         id: servo_control
         level: !lambda 'return (id(valve_closed).state/100);'
      - globals.set:
          id: idSavedStateValve
          value: 'false'

#Автоматическая работа отвода воды
  - platform: template
    name: "Automatic Water Drain"
    id: idAutoWaterDrain
    internal: False #Скрыть - true \показать - false
    optimistic: True
    lambda: !lambda 'return id(idSavedAutoWaterDrain);'
    turn_on_action:
      - script.execute: script_auto_water_drain_on
      - globals.set:
          id: idSavedAutoWaterDrain
          value: 'true'
    turn_off_action:
      - switch.turn_on: servo_control_switch
      - globals.set:
          id: idSavedAutoWaterDrain
          value: 'false'

#####################################################################################
####################################### Скрипт ######################################
script:
  - id: script_servo
    then:
      - if:
          condition:
            - lambda: 'return id(servo_sensor).state == id(valve_open).state;'
          then:
            - sensor.template.publish:
               id: servo_sensor
               state: !lambda 'return (id(valve_open).state/100);'
            - switch.turn_on: servo_control_switch
      - if:
          condition:
            and:
              - lambda: 'return id(servo_sensor).state == id(valve_closed).state;'
          then:
            - sensor.template.publish:
               id: servo_sensor
               state: !lambda 'return id(valve_closed).state;'
            - switch.turn_off: servo_control_switch

#Записывает в глобальную переменную положение сервопривода
  - id: record_servo_position
    then:
      - globals.set:
          id: saved_position
          value: !lambda 'return id(servo_sensor).state;'

#Если включить выключатель "Automatic Water Drain", то отвод воды в зависимости от статуса кофемашины замет нужное положение. 
#Если кофемашина выключена, то при включении "Automatic Water Drain", отвод воды закроет носик, а выключении отьедет в сторону и откроет носик.
#Знак || означет условие или
  - id: script_auto_water_drain_on
    then:
      - if:
          condition:
            - lambda: 'return id(idPowerStatus).state == true && id(idStatus).state == "Выберите напиток";'
          then:  
            - switch.turn_on: servo_control_switch #Не перекрываем носик кофемашины отводом воды
      - if:
          condition:
            - lambda: 'return id(idPowerStatus).state == false || id(idStatus).state == "Выключено";'
          then:  
            - switch.turn_off: servo_control_switch #Перекрываем носик кофемашины отводом воды

#Если выключатель "Automatic Water Drain" включен, то отвод воды будет убираться после того как пройдет этап промывки и будет предложено Выбрать напиток, если кофемашина выключена, то отвод воды будет в положении у носика
  - id: script_auto_water_drain
    then:
      - if:
          condition:
              #Если "Automatic Water Drain" включен и отвод воды закрывает носик и статус "Выберите напиток"
            - lambda: 'return id(idAutoWaterDrain).state == true && id(servo_control_switch).state == false && id(idStatus).state == "Выберите напиток";' 
          then:  
            - switch.turn_on: servo_control_switch
      - if:
          condition:
              #Если "Automatic Water Drain" включен и отвод воды не закрывает носик
            - lambda: 'return id(idAutoWaterDrain).state == true && id(servo_control_switch).state == true;'
          then:
            - if:
                condition:
                    #Если кофемашина выключена, где статус idPowerStatus = false или idStatus = "Выключено"
                  - lambda: 'return id(idPowerStatus).state == false || id(idStatus).state == "Выключено";'  
                then:
                  - delay: 5s 
                  - if:
                      condition:
                          #Повторная проверка, если кофемашина выключена, где статус idPowerStatus = false или idStatus = "Выключено"
                        - lambda: 'return id(idPowerStatus).state == false || id(idStatus).state == "Выключено";'  
                      then:
                        - switch.turn_off: servo_control_switch

#####################################################################################
####################################### Кнопка ######################################
button:
#Перезагрузка
  - platform: restart
    name: Restart
    icon: mdi:restart

#Включить кофемашину
  - platform: template
    name: "Power ON"
    icon: mdi:power
    on_press:
     - switch.turn_on: idRelaySwitch
     - delay: 1s
     - switch.turn_off: idRelaySwitch

#Выключить кофемашину
  - platform: template
    name: "Power OFF"
    icon: mdi:power
    on_press:
     - switch.turn_on: idRelaySwitch
     - delay: 2s
     - switch.turn_off: idRelaySwitch

#Выключить кофемашину командой AA:AA:AA:FE:00:00:C8:87:1B:40:55
  - platform: template
    name: "PowerOFF AA-FE"
    icon: mdi:coffee
    on_press:
      - uart.write:
          id: uart_mainboard
          data: [0xAA, 0xAA, 0xAA, 0xFE, 0x00, 0x00, 0xC8, 0x87, 0x1B, 0x40, 0x55]

#####################################################################################
############################ Рецепты приготовления кофе #############################
#Напиток: КофеX1. Зерно: Максимум. Кофе: 150 мл
  - platform: template
    name: "Кофе Max 150ml"
    icon: mdi:coffee
    on_press:
      - lambda: |-
          {
            uint8_t data[]={0x93, id(pack_counter)++, 0x01, 0x01};
            id(philip)->send_packet(data, sizeof(data));
          }
          {
            uint8_t data[]={0x90, id(pack_counter)++, 0x0A, 0x00, 0x01, 0x00, 0x02, 0x02, 0x00, 0x78, 0x00, 0x00, 0x00};
            id(philip)->send_packet(data, sizeof(data));
          }
          {
            uint8_t data[]={0x91, id(pack_counter)++, 0x01, 0x03};
            id(philip)->send_packet(data, sizeof(data));
          }

#Напиток: Кофе с молоком. Зерно: Максимум. Кофе: 120 мл. Молоко: 120 мл.
  - platform: template
    name: "Кофе с молоком 120/120ml"
    icon: mdi:coffee
    on_press:
      - lambda: |-
          {
            uint8_t data[]={0x93, id(pack_counter)++, 0x01, 0x01};
            id(philip)->send_packet(data, sizeof(data));
          }
          {
            uint8_t data[]={0x90, id(pack_counter)++, 0x0A, 0x02, 0x02, 0x00, 0x02, 0x01, 0x02, 0x78, 0x00, 0x78, 0x00};
            id(philip)->send_packet(data, sizeof(data));
          }
          {
            uint8_t data[]={0x91, id(pack_counter)++, 0x01, 0x03};
            id(philip)->send_packet(data, sizeof(data));
          }

#Напиток: Каппучино. Зерно: Максимум. Кофе: 60 мл. Молоко: 150 мл.
  - platform: template
    name: "Капучино Max 60/150ml"
    icon: mdi:coffee
    on_press:
      - lambda: |-
          {
            uint8_t data[]={0x93, id(pack_counter)++, 0x01, 0x01};
            id(philip)->send_packet(data, sizeof(data));
          }
          {
            uint8_t data[]={0x90, id(pack_counter)++, 0x0A, 0x03, 0x02, 0x00, 0x02, 0x03, 0x02, 0x3C, 0x00, 0x96, 0x00};
            id(philip)->send_packet(data, sizeof(data));
          }
          {
            uint8_t data[]={0x91, id(pack_counter)++, 0x01, 0x03};
            id(philip)->send_packet(data, sizeof(data));
          }


#####################################################################################
####################################### Число #######################################
#Ползунок для управления сервоприводом
number:
  - platform: template
    name: Valve Position
    min_value: -100
    max_value: 100
    update_interval: 1s 
    mode: slider #slider/box
    lambda: 'return id(servo_sensor).state;' 
    step: 1
    set_action:
      then:
        - servo.write:
           id: servo_control
           level: !lambda 'return x / 100.0;'
        - sensor.template.publish:
           id: servo_sensor
           state: !lambda 'return x;'

#Указываем начальную позицию сервопривода  
  - platform: template
    name: Valve open
    id: valve_open
    min_value: -100
    max_value: 100
    mode: box #slider/box
    step: 1
    optimistic: true
    restore_value: true

#Указываем конечную позицию сервопривода  
  - platform: template
    name: Valve closed
    id: valve_closed
    min_value: -100
    max_value: 100
    mode: box #slider/box
    step: 1
    optimistic: true
    restore_value: true


#####################################################################################
####################################### Время #######################################
time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow
    on_time:
      - seconds: 59
        then:
          - lambda: |-
              id(idPowerStatus).publish_state(false);
          - script.execute: script_auto_water_drain
